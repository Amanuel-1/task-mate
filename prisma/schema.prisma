datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  teams         Team[]
  projects      Project[]
  tasks         Task[]
  isAdmin       Boolean   @default(false)
  Message       Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   teams         Team[]
//   projects      Project[]
//   tasks         Task[]
//   isAdmin       Boolean   @default(false)
//   Message       Message[]
// }


model Team {
  id             String @id @default(cuid())
  name           String
  members        User[] @relation()
  organizationId String
  // tasks Task[]
  managerId      String
}
model Organization {
  id String @id @default(cuid())
  name String
  projects Project[]
}

model Project {
  id             String   @id @default(cuid())
  title          String   @unique
  OrganizationId String
  creatorId String
  coverImage     String   @db.Text
  description    String   @db.Text
  demoLink       String
  projectLink    String
  tasks Task[]
  createdBy      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization   Organization @relation(fields: [OrganizationId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  dueDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([OrganizationId, title, dueDate])
}

model Task {
  id         String   @id @default(cuid())
  name       String
  projectId String
  progress Int @default(0)

  assignedTo User[]
  project Project @relation(fields: [projectId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        String  @id @default(cuid())
  authorId  String
  taskId    String?
  projectId String?
  title     String
  content   String
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String  @id @default(cuid())
  postId    String?
  commentId String?
  authorid  String

  // post          BlogPost?  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentComment Comment?  @relation("childComments", fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  childComments Comment[] @relation("childComments")
}
