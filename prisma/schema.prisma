datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  teams    Team[]
  projects Project[]
  tasks    Task[]
  role     Role      @default(TEAM_MEMBER)
  // isAdmin  Boolean   @default(false) // changed  to enum 
  Message  Message[]
}

model Stakeholder {
  email   String  @id @default(cuid())
  project Project @relation(fields: [email], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  ADMIN
  TEAM_MANAGER
  TEAM_MEMBER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id              String @id @default(cuid())
  name            String
  members         User[] @relation()
  administratorId String
  // tasks Task[]
  managerId       String
}

model Administrator {
  id       String    @id @default(cuid())
  name     String
  projects Project[]
}

// !! the commented are not clear...
model Project {
  id              String         @id @default(cuid())
  title           String         @unique
  // AdministratorId String
  // creatorId       String
  coverImage      String         @db.Text
  description     String         @db.Text
  // demoLink        String
  // projectLink     String
  tasks           Task[]
  // createdBy       User          @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // administrator   Administrator @relation(fields: [AdministratorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dueDate         DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  User            User?          @relation(fields: [userId], references: [id])
  userId          String?
  Stakeholder     Stakeholder[]
  Administrator   Administrator? @relation(fields: [administratorId], references: [id])
  administratorId String?

  // @@index([AdministratorId, title, dueDate])
}

model Task {
  id        String   @id @default(cuid())
  title     String // changed  it from name to Title
  projectId String
  progress  Progress @default(NOT_STARTED) // change to enum {notstarted, inprogress, finished}

  assignedTo User[]
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  dueDate   DateTime
  SubTask   SubTask[]
}

enum Progress {
  NOT_STARTED
  IN_PROGRESS
  FINISHED
}

model SubTask {
  id       String   @id @default(cuid())
  name     String
  taskId   String
  progress Progress @default(NOT_STARTED)

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

// model Report {
//   id        String  @id @default(cuid())
//   authorId  String // whyyyy ! Remove  it
//   taskId    String?
//   projectId String?
//   title     String
//   content   String
// }

// model Comment {
//   id        String  @id @default(cuid())
//   postId    String?
//   commentId String?
//   authorid  String

//   // post          BlogPost?  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   parentComment Comment?  @relation("childComments", fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   childComments Comment[] @relation("childComments")
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   teams         Team[]
//   projects      Project[]
//   tasks         Task[]
//   isAdmin       Boolean   @default(false)
//   Message       Message[]
// }
